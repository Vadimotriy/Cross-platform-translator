import os
import soundfile

from aiogram import Bot, types, html, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from io import BytesIO
from os import path
from PIL import Image

from constants import *
from bot import USERS, Translator
from functions import genitive, random_word

router = Router()
router_for_translate = Router()


def main():
    # /start
    @router.message(F.text, Command('start'))
    async def send_welcome(message: types.Message):
        lang_def_1, lang_def_2, lang_photo_3, lang_photo_4 = USERS.get_data(message.from_user.id)
        lang_aud_1, lang_aud_2 = USERS.get_data(message.from_user.id, 'audio')

        builder = ReplyKeyboardBuilder()
        buttons = ['/change_lang_def', '/fast_change_def', '/change_lang_photo', '/fast_change_photo',
                   '/change_lang_audio', '/fast_change_audio', '/all_languages', '/random_word', '/help']
        for i in buttons:
            builder.add(types.KeyboardButton(text=str(i)))
        builder.adjust(2)

        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç {html.bold(html.quote(message.from_user.first_name))}!\n\n"
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º. –ù–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É —ç—Ç–æ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫.\n\n"
            f"–°–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(lang_def_1.lower())}</b> –Ω–∞ <b>{lang_def_2.lower()}</b>.\n"
            f"–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(lang_photo_3.lower())}</b> –Ω–∞ <b>{lang_photo_4.lower()}</b>.\n"
            f"–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(lang_aud_1.lower())}</b> –Ω–∞ <b>{lang_aud_2.lower()}</b>.\n\n"
            "–û —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ –∏ –æ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º —Ç—ã —É–∑–Ω–∞–µ—à—å –≤ /help.\n\n"
            "–í—Å—ë –ø—Ä–æ—Å—Ç–æ! üòé",
            parse_mode=ParseMode.HTML, reply_markup=builder.as_markup(resize_keyboard=True)
        )

    # /help
    @router.message(F.text, Command('help'))
    async def send_help(message: types.Message):
        lang_def_1, lang_def_2, lang_photo_3, lang_photo_4 = USERS.get_data(message.from_user.id)
        lang_aud_1, lang_aud_2 = USERS.get_data(message.from_user.id, 'audio')
        await message.answer(
            "/help - –º–µ–Ω—é –ø–æ–º–æ—â–∏\n"
            "/change_lang_def - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/change_lang_photo - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/change_lang_audio - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫–∏ –¥–ª—è –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/fast_change_def - –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/fast_change_photo - –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/fast_change_audio - –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ –¥–ª—è –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞\n"
            "/all_languages - —Å–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤\n"
            "/random_word - —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫\n\n"
            "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ\n"
            "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ\n"
            "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ú–ï–ù–ï–ï 40 –°–ï–ö–£–ù–î –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ\n\n"
            f"–°–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç –æ–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(lang_def_1.lower())}</b> –Ω–∞ <b>{lang_def_2.lower()}</b>\n"
            f"–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(lang_photo_3.lower())}</b> –Ω–∞ <b>{lang_photo_4.lower()}</b>\n"
            f"–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(lang_aud_1)}</b> –Ω–∞ <b>{lang_aud_2}</b>\n\n"
            f"–í –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –µ—Å—Ç—å –æ—Å–æ–±—ã–π —è–∑—ã–∫ - <i>'–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞'.</i> "
            f"–û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø–µ—Ä–µ–¥—è—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞. –° –Ω–µ–≥–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å.", parse_mode=ParseMode.HTML
        )

    # /change_lang_audio
    @router.message(F.text, StateFilter(None), Command('change_lang_audio'))
    async def choose_audio(message: types.Message, state: FSMContext):
        await message.answer(text="–í–≤–µ–¥–∏ —è–∑—ã–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await state.set_state(ChangeAudLanguage.choosing_first_lang)

    # –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ —è–∑—ã–∫–∞
    @router.message(ChangeAudLanguage.choosing_first_lang, F.text.capitalize().in_(LANGUAGES_FOR_AUDIO.keys()))
    async def choose_audio_lang(message: types.Message, state: FSMContext):
        await state.update_data(chosen_lang=message.text.lower())
        await message.answer(text="–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ")
        await state.set_state(ChangeAudLanguage.choosing_second_lang)

    # –æ—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(StateFilter("ChangeAudLanguage:choosing_first_lang"))
    async def choose_audio_incorrectly(message: types.Message):
        await message.answer(
            text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                 "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤:"
        )

    # –ò—Ç–æ–≥
    @router.message(ChangeAudLanguage.choosing_second_lang, F.text.capitalize().in_(SECOND_LANGUAGE))
    async def audio_chosen(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        USERS.change_languages(message.from_user.id, user_data['chosen_lang'], message.text.lower(), 'audio')
        await message.answer(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(user_data['chosen_lang'])}</b> –Ω–∞ <b>{message.text.lower()}</b>.\n",
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    # –æ—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(ChangeAudLanguage.choosing_second_lang)
    async def audio_chosen_incorrectly(message: types.Message):
        await message.answer(
            text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                 "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤:"
        )









    # /change_lang_photo
    @router.message(F.text, StateFilter(None), Command('change_lang_photo'))
    async def choose_photo(message: types.Message, state: FSMContext):
        await message.answer(text="–í–≤–µ–¥–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:")
        await state.set_state(ChangePhotoLanguage.choosing_first_lang)

    # –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ —è–∑—ã–∫–∞
    @router.message(ChangePhotoLanguage.choosing_first_lang, F.text.capitalize().in_(LANGUAGES_FOR_PHOTOES.keys()))
    async def choose_photo_lang(message: types.Message, state: FSMContext):
        await state.update_data(chosen_lang=message.text.lower())
        await message.answer(text="–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ")
        await state.set_state(ChangePhotoLanguage.choosing_second_lang)

    # –æ—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(StateFilter("ChangePhotoLanguage:choosing_first_lang"))
    async def choose_photo_incorrectly(message: types.Message):
        await message.answer(
            text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                 "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤:"
        )

    # –ò—Ç–æ–≥
    @router.message(ChangePhotoLanguage.choosing_second_lang, F.text.capitalize().in_(SECOND_LANGUAGE))
    async def photo_chosen(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        USERS.change_languages(message.from_user.id, user_data['chosen_lang'], message.text.lower(), 'photo')
        await message.answer(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å <b>{genitive(user_data['chosen_lang'])}</b> –Ω–∞ <b>{message.text.lower()}</b>.\n",
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    # –æ—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(ChangePhotoLanguage.choosing_second_lang)
    async def photo_chosen_incorrectly(message: types.Message):
        await message.answer(
            text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                 "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤:"
        )






    # /fast_change_def
    @router.message(F.text, StateFilter(None), Command('fast_change_def'))
    async def fast_change_def(message: types.Message):
        languages = USERS.get_data(message.from_user.id)
        if languages[0].lower() == '–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞':
            await message.answer(f"–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞.")
            return
        USERS.change_languages(message.from_user.id, languages[1], languages[0], 'def')
        await message.answer(f"–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(languages[1])} –Ω–∞ {languages[0].lower()}\n")

    # /fast_change_photo
    @router.message(F.text, StateFilter(None), Command('fast_change_photo'))
    async def fast_change_def(message: types.Message):
        languages = USERS.get_data(message.from_user.id)
        if languages[3] in LANGUAGES_FOR_PHOTOES.keys():
            USERS.change_languages(message.from_user.id, languages[3], languages[2], 'photo')
            await message.answer(f"–¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(languages[3])} –Ω–∞ {languages[2].lower()}.")
        else:
            await message.answer(f"–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞ —Å {genitive(languages[3])} –Ω–µ—Ç.")

    # /fast_change_photo
    @router.message(F.text, StateFilter(None), Command('fast_change_audio'))
    async def fast_change_def(message: types.Message):
        lang1, lang2 = USERS.get_data(message.from_user.id, 'audio')
        if lang2 in LANGUAGES_FOR_AUDIO.keys():
            USERS.change_languages(message.from_user.id, lang2, lang1, 'audio')
            await message.answer(f"–¢–µ–ø–µ—Ä—å a—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang2)} –Ω–∞ {lang1.lower()}.")
        else:
            await message.answer(f"–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞ —Å {genitive(lang2)} –Ω–µ—Ç.")

    # /change_lang_def
    @router.message(F.text, StateFilter(None), Command('change_lang_def'))
    async def choose_def(message: types.Message, state: FSMContext):
        await message.answer(text="–í–≤–µ–¥–∏ —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:")
        await state.set_state(ChangeDefLanguage.choosing_first_lang)

    # –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ —è–∑—ã–∫–∞
    @router.message(ChangeDefLanguage.choosing_first_lang, F.text.capitalize().in_(TRANSLATED_LANGUAGES.keys()))
    async def choose_def_lang(message: types.Message, state: FSMContext):
        await state.update_data(chosen_lang=message.text.lower())
        await message.answer(text="–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: ")
        await state.set_state(ChangeDefLanguage.choosing_second_lang)

    # –æ—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(StateFilter("ChangeDefLanguage:choosing_first_lang"))
    async def choose_def_incorrectly(message: types.Message):
        await message.answer(
            text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                 "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤:"
        )

    # –∏—Ç–æ–≥
    @router.message(ChangeDefLanguage.choosing_second_lang, F.text.capitalize().in_(SECOND_LANGUAGE))
    async def def_chosen(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        USERS.change_languages(message.from_user.id, user_data['chosen_lang'], message.text.lower(), 'def')
        await message.answer(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Äe–≤–æ–¥ —Å <b>{genitive(user_data['chosen_lang'])}</b> –Ω–∞ <b>{message.text.lower()}</b>.\n",
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    # –æ—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(ChangeDefLanguage.choosing_second_lang)
    async def def_chosen_incorrectly(message: types.Message):
        await message.answer(
            text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
                 "–í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤:"
        )

    # /all_languages
    @router.message(F.text, Command('all_languages'))
    async def send_welcome(message: types.Message):
        buttons = []
        for i in ['–û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥', "–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥", '–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥']:
            buttons.append([types.InlineKeyboardButton(text=i, callback_data=i)])
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞–±–æ—Ä —è–∑—ã–∫–æ–≤?", reply_markup=keyboard)

    # /random_word
    @router.message(F.text, Command('random_word'))
    async def send_welcome(message: types.Message):
        word = random_word()
        src, dest = USERS.get_data(message.from_user.id, 'def')
        dest = TRANSLATED_LANGUAGES[dest.capitalize()]
        result = '\n'.join(Translator.translate(word.split('\n'), 'en', dest))

        await message.answer(f"–í–∞—à–µ —Å–ª–æ–≤–æ:<i>\n{word}</i>\n\n–ü–µ—Ä–µ–≤–æ–¥:\n<i>{result}</i>",
                             parse_mode=ParseMode.HTML)

    # –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤
    @router_for_translate.message(F.text)
    async def echo(message: types.Message):
        try:
            print(f"{message.from_user.full_name}:\t{message.text}")
            await message.bot.send_chat_action(message.chat.id, 'typing')
            src, dest = USERS.get_data(message.from_user.id)[:2]
            src, dest = TRANSLATED_LANGUAGES[src.capitalize()], TRANSLATED_LANGUAGES[dest.capitalize()]
            result = '\n'.join(Translator.translate(message.text.split('\n'), src, dest))
            await message.answer(result)
        except Exception:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.')

    # —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥
    @router_for_translate.message(F.photo)
    async def photo_msg(message: types.Message, bot: Bot):
        try:
            await message.bot.send_chat_action(message.chat.id, 'typing')
            image = BytesIO()
            await bot.download(message.photo[-1], destination=image)
            image = Image.open(image)
            src, dest = USERS.get_data(message.from_user.id)[2:]
            src, dest = LANGUAGES_FOR_PHOTOES[src.capitalize()], TRANSLATED_LANGUAGES[dest.capitalize()]

            text, result = Translator.get_text_and_translate(image, src, dest)
            text, result = '\n'.join(text), '\n'.join(result)
            await message.answer('–¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ:\n\n' + text)
            print(f"{message.from_user.full_name}:\t{text}")
            await message.answer('–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n' + result)
        except Exception:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ç–æ —Å —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –Ω–µ–ø–æ–ª–∞–¥–∫–∞–º.')

    @router_for_translate.message(F.voice)
    async def audio_msg(message: types.Message, bot: Bot):
        try:
            split_up = path.splitext(message.voice.file_id)
            file_name = f'Data/aud_{message.from_user.id}.ogg'
            await bot.download(message.voice, file_name)

            file_name_wav = f'Data/aud_{message.from_user.id}.wav'
            data, samplerate = soundfile.read(file_name)
            soundfile.write(file_name_wav, data, samplerate)

            src, dest = USERS.get_data(message.from_user.id, 'audio')
            src, dest = LANGUAGES_FOR_AUDIO[src.capitalize()], TRANSLATED_LANGUAGES[dest.capitalize()]
            text, result = Translator.get_and_translate_audio(file_name_wav, src, dest)

            result = '\n'.join(result)
            await message.answer('–¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n' + text)
            print(f"{message.from_user.full_name}:\t{text}")
            await message.answer('–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n' + result)

            os.remove(file_name)
            os.remove(file_name_wav)

        except TimeoutError:
            await message.answer('–í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ 40 —Å–µ–∫—É–Ω–¥!')
        except Exception:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.')


def callbacks():
    # —Å–ø–∏—Å–æ–∫ –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    @router.callback_query(F.data == "–û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥")
    async def send_random_value(callback: types.CallbackQuery):
        start = '–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω—É–∂–Ω—ã–π —è–∑—ã–∫!)\n\n'
        text = start + '\n'.join([i for i in TRANSLATED_LANGUAGES.keys()])
        await callback.message.answer(text)
        await callback.answer()

    # —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    @router.callback_query(F.data == "–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥")
    async def send_random_value(callback: types.CallbackQuery):
        start = ('–í–æ—Ç —è–∑—ã–∫–∏, –° –ö–û–¢–û–†–û–´–• —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ. –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è '
                 '–ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω–æ–º.\n\n'
                 '–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω—É–∂–Ω—ã–π —è–∑—ã–∫!)\n\n')
        text = start + '\n'.join([i for i in LANGUAGES_FOR_PHOTOES.keys()])
        await callback.message.answer(text)
        await callback.answer()

    # —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    @router.callback_query(F.data == "–ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥")
    async def send_random_value(callback: types.CallbackQuery):
        start = ('–í–æ—Ç —è–∑—ã–∫–∏, –° –ö–û–¢–û–†–û–´–• —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è '
                 '–ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω–æ–º.\n\n'
                 '–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω—É–∂–Ω—ã–π —è–∑—ã–∫!)\n\n')
        text = start + '\n'.join([i for i in LANGUAGES_FOR_AUDIO.keys()])
        await callback.message.answer(text)
        await callback.answer()


main()
callbacks()
