import requests

from vkbottle.bot import Message
from PIL import Image

from bot import bot, USERS, Translator
from constants import *
from functions import *


def main():
    # –ù–∞—á–∞—Ç—å
    @bot.on.private_message(text="–ù–∞—á–∞—Ç—å")
    async def start_answer(message: Message):
        id = message.from_id
        lang_def_1, lang_def_2, lang_photo_3, lang_photo_4 = USERS.get_data(id)

        keyboard = make_keyboard()

        text = f"""–ü—Ä–∏–≤–µ—Ç!\n
–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º. –ù–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É —ç—Ç–æ –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫.\n
–°–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang_def_1.lower())} –Ω–∞ {lang_def_2.lower()} –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
–ò –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang_photo_3.lower())} –Ω–∞ {lang_photo_4.lower()} –¥–ª—è —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞.\n
–¢—ã –º–æ–∂–µ—à—å —ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö –∏ –æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Ç—ã –Ω–∞–π–¥–µ—à—å –≤ /help.\n
–í—Å—ë –ø—Ä–æ—Å—Ç–æ! üòé"""

        await message.answer(text, keyboard=keyboard.get_json())

    # /help
    @bot.on.private_message(text="/help")
    async def help_answer(message: Message):
        lang_def_1, lang_def_2, lang_photo_3, lang_photo_4 = USERS.get_data(message.from_id)
        text = f"""/help - –º–µ–Ω—é –ø–æ–º–æ—â–∏
/change_lang_def <—è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞> <—è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞> - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
/change_lang_photo <—è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞> <—è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞> - –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
* —Ä–µ–≥–∏—Å—Ç—Ä —è–∑—ã–∫–æ–≤ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
/fast_change_def - –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞
/fast_change_photo - –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞
/all_languages - —Å–ø–∏—Å–∫–∏ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
/random_word - —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫\n
–ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
–ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ\n
–°–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang_def_1.lower())} –Ω–∞ {lang_def_2.lower()} –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
–ò –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang_photo_3.lower())} –Ω–∞ {lang_photo_4.lower()} –¥–ª—è —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞.\n
–î–ª—è —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç –≤ –æ–±—ã—á–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ –µ—Å—Ç—å –æ—Å–æ–±—ã–π —è–∑—ã–∫ - "–ê–≤—Ç–æ". –û–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø–µ—Ä–µ–¥—è—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞."""

        await message.answer(text)

    # /all_languages
    @bot.on.private_message(text="/all_languages")
    async def echo_answer(message: Message):
        keyboard = Keyboard(one_time=False, inline=True)
        keyboard.add(Text("–û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥"), KeyboardButtonColor.PRIMARY)
        keyboard.row()
        keyboard.add(Text("–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥"), KeyboardButtonColor.PRIMARY)

        text = """–î–ª—è –∫–∞–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞–±–æ—Ä —è–∑—ã–∫–æ–≤?"""

        await message.answer(text, keyboard=keyboard.get_json())

    # /fast_change_def
    @bot.on.private_message(text="/fast_change_def")
    async def fast_change_def_answer(message: Message):
        languages = USERS.get_data(message.from_id)
        if languages[0].lower() == '–∞–≤—Ç–æ':
            await message.answer(f"–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π —è–∑—ã–∫.")
        else:
            USERS.change_languages(message.from_id, languages[1], languages[0], 'def')
            await message.answer(f"–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(languages[1])} –Ω–∞ {languages[0].lower()}.")

    # /change_lang_def
    @bot.on.private_message(text="/change_lang_def <lang1> <lang2>")
    async def change_lang_def_answer(message: Message, lang1, lang2):
        if lang1.capitalize() in TRANSLATED_LANGUAGES.keys() and lang2.capitalize() in SECOND_LANGUAGE:
            USERS.change_languages(message.from_id, lang1.capitalize(), lang2.capitalize(), 'def')
            await message.answer(f"–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang1)} –Ω–∞ {lang2.lower()}.")
        elif lang2.capitalize() == '–ê–≤—Ç–æ':
            await message.answer(f"–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π —è–∑—ã–∫.")
        else:
            await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —Å –æ–¥–Ω–∏–º –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤.')

    # /fast_change_photo
    @bot.on.private_message(text="/fast_change_photo")
    async def fast_change_photo_answer(message: Message):
        languages = USERS.get_data(message.from_id)
        if languages[0].lower() == '–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞':
            await message.answer(f"–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞.")
        else:
            USERS.change_languages(message.from_id, languages[3], languages[2], 'photo')
            await message.answer(f"–¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(languages[3])} –Ω–∞ {languages[2].lower()}.")

    # /change_photo
    @bot.on.private_message(text="/change_lang_photo <lang1> <lang2>")
    async def change_photo_answer(message: Message, lang1, lang2):
        if lang1.capitalize() in TRANSLATED_LANGUAGES.keys()[1:] and lang2.capitalize() in SECOND_LANGUAGE:
            USERS.change_languages(message.from_id, lang1.capitalize(), lang2.capitalize(), 'photo')
            await message.answer(f"–¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —Å {genitive(lang1)} –Ω–∞ {lang2.lower()}.")
        elif lang2.capitalize() == '–ê–≤—Ç–æ' or lang1.capitalize() == '–ê–≤—Ç–æ':
            await message.answer(f"–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–µ.")
        else:
            await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞!\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —Å –æ–¥–Ω–∏–º –∏–∑ –º–æ–∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤.')

    # /random_word
    @bot.on.private_message(text="/random_word")
    async def send_welcome(message: Message):
        word = random_word()
        src, dest = USERS.get_data(message.from_id, 'def')
        dest = TRANSLATED_LANGUAGES[dest.capitalize()]
        result = '\n'.join(Translator.translate(word.split('\n'), 'en', dest))

        await message.answer(f"–í–∞—à–µ —Å–ª–æ–≤–æ:\n{word}\n\n–ü–µ—Ä–µ–≤–æ–¥:\n{result}")

    # –ø–µ—Ä–µ–≤–æ–¥ —Ñ–æ—Ç–æ
    @bot.on.private_message(attachment='photo')
    async def func(message: Message):
        try:
            await message.answer('–í–Ω–∏–º–∞–Ω–∏–µ! –§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.')
            response = requests.get(message.attachments[0].photo.sizes[-5].url, stream=True)
            response.raw.decode_content = True
            image = Image.open(response.raw)

            src, dest = USERS.get_data(message.from_id)[2:]
            src, dest = LANGUAGES_FOR_PHOTOES[src.capitalize()], TRANSLATED_LANGUAGES[dest.capitalize()]

            text, result = Translator.get_text_and_translate(image, src, dest)
            text, result = '\n'.join(text), '\n'.join(result)

            await message.answer('–¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ:\n\n' + text)
            await message.answer('–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n' + result)
        except Exception:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.')

    # –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç
    @bot.on.private_message(text="<msg>")
    async def answer(message: Message, msg):
        if msg == '–û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥':  # –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ /all_languages
            start = '–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω—É–∂–Ω—ã–π —è–∑—ã–∫!)\n\n'
            text = start + '\n'.join([i for i in TRANSLATED_LANGUAGES.keys()])
            await message.answer(text)

        elif msg == '–§–æ—Ç–æ–ø–µ—Ä–µ–≤–æ–¥':  # –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ /all_languages
            start = ('–í–æ—Ç —è–∑—ã–∫–∏, –° –ö–û–¢–û–†–û–´–• —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ. –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è '
                     '–ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω–æ–º.\n'
                     '–ù–∞–¥–µ—é—Å—å, —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω—É–∂–Ω—ã–π —è–∑—ã–∫!)\n\n')
            text = start + '\n'.join([i for i in LANGUAGES_FOR_PHOTOES.keys()])
            await message.answer(text)

        else:
            src, dest = USERS.get_data(message.from_id)[:2]
            src, dest = TRANSLATED_LANGUAGES[src.capitalize()], TRANSLATED_LANGUAGES[dest.capitalize()]
            print(f"{message.text}")
            result = '\n'.join(Translator.translate(message.text.split('\n'), src, dest))
            await message.answer(result)
